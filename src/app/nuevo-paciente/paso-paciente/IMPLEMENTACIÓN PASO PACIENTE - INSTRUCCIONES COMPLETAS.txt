#   IMPLEMENTACI√ìN PASO PACIENTE - INSTRUCCIONES COMPLETAS

## ARCHIVOS A CREAR/ACTUALIZAR

### 1. **REEMPLAZAR ARCHIVO PRINCIPAL**
```bash
# Archivo: C:\CICEG-HG-APP\src\app\nuevo-paciente\paso-paciente\paso-paciente.ts
```
**Acci√≥n:** Reemplazar TODO el contenido con el artifact `paso_paciente_component`

### 2. **CREAR/ACTUALIZAR TEMPLATE HTML**
```bash
# Archivo: C:\CICEG-HG-APP\src\app\nuevo-paciente\paso-paciente\paso-paciente.html
```
**Acci√≥n:** Reemplazar TODO el contenido con el artifact `paso_paciente_html`

### 3. **CREAR/ACTUALIZAR ESTILOS CSS**
```bash
# Archivo: C:\CICEG-HG-APP\src\app\nuevo-paciente\paso-paciente\paso-paciente.css
```
**Acci√≥n:** Reemplazar TODO el contenido con el artifact `paso_paciente_css`

## üîß FUNCIONALIDADES IMPLEMENTADAS

###   **FORMULARIO REACTIVO COMPLETO**
- **Campos obligatorios:** Tipo de sangre, transfusiones, familiar responsable, parentesco, tel√©fono familiar
- **Campos opcionales:** Alergias, ocupaci√≥n, escolaridad, lugar de nacimiento
- **Validaciones espec√≠ficas:** Tel√©fonos de 10 d√≠gitos, validaciones condicionales
- **Campo condicional:** Detalles de transfusiones solo aparece si selecciona "S√≠"

###   **INTEGRACI√ìN CON WIZARD STATE**
- **Carga datos anteriores:** Muestra resumen de datos personales del paso anterior
- **Validaci√≥n de navegaci√≥n:** Verifica que el paso anterior est√© completado
- **Auto-guardado:** Cada 30 segundos autom√°ticamente
- **Navegaci√≥n inteligente:** Botones anterior/siguiente funcionales

###   **CAT√ÅLOGOS INTEGRADOS**
- **Tipos de sangre:** A+, A-, B+, B-, AB+, AB-, O+, O-, Desconocido
- **Parentescos:** Padre, Madre, Esposo(a), Hijo(a), Hermano(a), etc.
- **Niveles de escolaridad:** Sin estudios hasta Posgrado
- **Fallback autom√°tico:** Si falla la conexi√≥n, usa datos est√°ticos

###   **VALIDACIONES M√âDICAS**
- **Tipo de sangre:** Obligatorio de cat√°logo
- **Transfusiones:** Radio buttons S√≠/No obligatorio
- **Detalles transfusiones:** Obligatorio solo si selecciona "S√≠" (m√≠nimo 10 caracteres)
- **Familiar responsable:** Obligatorio, m√≠nimo 3 caracteres
- **Tel√©fono familiar:** Obligatorio, exactamente 10 d√≠gitos mexicanos

###   **UX/UI MODERNA**
- **Resumen del paciente:** Muestra datos del paso anterior en card azul
- **Barra de progreso:** 33.3% (paso 2 de 6)
- **Formulario en secciones:** Informaci√≥n m√©dica, contacto emergencia, datos adicionales
- **Estados visuales:** Loading, errores, validaciones en tiempo real
- **Responsive design:** Funciona en m√≥vil y desktop

###   **MANEJO DE ERRORES**
- **Validaci√≥n de paso anterior:** Redirige si falta informaci√≥n
- **Campos requeridos:** Marcados visualmente con *
- **Mensajes de error:** Espec√≠ficos por campo y tipo de error
- **Auto-guardado:** Manejo de errores silencioso

## üõ£Ô∏è FLUJO DE NAVEGACI√ìN

```
1. Usuario llega desde: /app/nuevo-paciente/persona
2. Verifica: ¬øExisten datos personales v√°lidos?
   - ‚ùå NO ‚Üí Redirige a paso anterior con alerta
   -   S√ç ‚Üí Contin√∫a
3. Muestra: Resumen de datos personales del paso anterior
4. Formulario: 3 secciones (m√©dica, emergencia, adicional)
5. Validaci√≥n: Campos obligatorios + validaciones espec√≠ficas
6. Guardado: Auto-guardado + guardado manual
7. Navegaci√≥n: Anterior (vuelve a persona) | Siguiente (va a expediente)
```

## üîß COMANDOS PARA PROBAR

```bash
# 1. Iniciar servidor
ng serve

# 2. Navegar a la aplicaci√≥n
http://localhost:4200/app/nuevo-paciente/inicio

# 3. Flujo completo:
# - Hacer clic en "Comenzar Registro"
# - Llenar formulario de datos personales (paso 1)
# - Hacer clic en "Siguiente"
# - ¬°Deber√≠a aparecer el formulario de informaci√≥n m√©dica!

# 4. Probar navegaci√≥n:
# - Bot√≥n "Anterior" ‚Üí Vuelve a datos personales
# - Llenar campos obligatorios
# - Bot√≥n "Siguiente" ‚Üí Va al siguiente paso
```

## üéØ FUNCIONALIDADES CLAVE A PROBAR

### **1. VALIDACI√ìN DE PASO ANTERIOR**
- Intentar acceder directamente a `/app/nuevo-paciente/paciente`
- Deber√≠a redirigir a datos personales con alerta

### **2. RESUMEN DE DATOS**
- Completar paso 1 (datos personales)
- En paso 2 deber√≠a mostrar: Nombre completo, CURP, edad, sexo

### **3. VALIDACIONES DE FORMULARIO**
- **Tipo de sangre:** Probar sin seleccionar ‚Üí Error
- **Transfusiones:** Probar sin seleccionar ‚Üí Error
- **Detalles transfusiones:** Seleccionar "S√≠" ‚Üí Campo aparece y es obligatorio
- **Familiar responsable:** Probar vac√≠o ‚Üí Error
- **Tel√©fono familiar:** Probar con menos de 10 d√≠gitos ‚Üí Error

### **4. AUTO-GUARDADO**
- Llenar algunos campos
- Esperar 30 segundos
- Ver en consola: "Borrador de paciente guardado autom√°ticamente"

### **5. CAT√ÅLOGOS**
- **Tipo sangre:** Deber√≠a mostrar A+, A-, B+, etc.
- **Parentesco:** Deber√≠a mostrar Padre, Madre, etc.
- **Escolaridad:** Deber√≠a mostrar Sin estudios, Primaria, etc.

## üêõ POSIBLES ERRORES Y SOLUCIONES

### **ERROR: "Cannot find module '@angular/forms'"**
```bash
# Soluci√≥n:
npm install @angular/forms
```

### **ERROR: "Cannot find module 'wizard.models'"**
- Verificar que existe: `src/app/models/wizard.models.ts`
- Verificar imports en el componente

### **ERROR: "Cannot find service 'CatalogoService'"**
- Verificar que existe: `src/app/services/catalogo.service.ts`
- Verificar que est√° actualizado con el c√≥digo correcto

### **ERROR: Radio buttons no funcionan**
- Verificar que se import√≥ ReactiveFormsModule
- Verificar que el FormBuilder est√° configurado correctamente

### **ERROR: Cat√°logos vac√≠os**
- Normal si no hay backend
- Deber√≠a usar datos est√°ticos de fallback autom√°ticamente

##   ESTADO ESPERADO DESPU√âS DE IMPLEMENTAR

###   **LO QUE DEBER√çA FUNCIONAR:**
1. **Navegaci√≥n completa:** Inicio ‚Üí Persona ‚Üí Paciente
2. **Formulario funcional:** Todos los campos y validaciones
3. **Auto-guardado:** Cada 30 segundos en sessionStorage
4. **Barra de progreso:** 33.3% en paso 2
5. **Cat√°logos cargados:** Con datos est√°ticos de fallback
6. **Responsive:** Funciona en m√≥vil y desktop

### ‚è≥ **PR√ìXIMO PASO:**
Despu√©s de probar que este paso funciona correctamente:
- **Siguiente:** Implementar `PasoExpedienteComponent` (creaci√≥n autom√°tica)
- **Despu√©s:** `PasoDocumentoClinicoComponent` (selecci√≥n tipo documento)

##    RESULTADO FINAL

Una vez implementado correctamente, tendr√°s:

-   **Wizard completo de 2 pasos funcionales**
-   **Formularios reactivos con validaciones m√©dicas**
-   **Estado persistente entre pasos**
-   **UI moderna y responsive**
-   **Cat√°logos con fallback autom√°tico**
-   **Auto-guardado funcional**
-   **Navegaci√≥n inteligente entre pasos**

**¬°El sistema ya tiene una base s√≥lida para el registro de pacientes!**  
